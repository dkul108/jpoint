{"componentChunkName":"component---gatsby-theme-mdx-deck-src-templates-deck-js","path":"/print","result":{"data":{"deck":{"id":"1d7a5c39-7d15-5310-b44e-97027bbccbca","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar theme = vsDark;\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  theme: theme,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Dynamic Constants\"), mdx(\"h2\", null, mdx(Red, {\n    mdxType: \"Red\"\n  }, \"Oxymoron or promising JVM feature?\")), mdx(\"h3\", null, \"#JPoint2020 \", \"\\xA0\", \" \", \"\\xA0\", \" \", \"\\xA0\", \" #Bytecode \", \"\\xA0\", \" \", \"\\xA0\", \" \", \"\\xA0\", \" #JaCoCo\"), mdx(\"h5\", null, \"\\uD83D\\uDC4B Evgeny Mandrikov \", \"\\xA0\", \" \", \"\\xA0\", \" \", \"\\xA0\", \" \", \"\\xA0\", \" \\uD83D\\uDC26 @\", \"_\", \"Godin\", \"_\"), mdx(\"hr\", null), mdx(\"div\", {\n    style: {\n      height: '100%'\n    }\n  }, mdx(\"center\", null, mdx(\"img\", {\n    style: {\n      width: '60%'\n    },\n    src: sonarsource_image\n  })), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"/* TODO Don't forget to add huge disclaimer\\n * that all opinions hereinbelow are my own\\n * and not my employer's.\\n *\\n * They can only dream that they own them.\\n */\\n\")))), mdx(\"hr\", null), mdx(\"h1\", null, \"JaCoCo\"), mdx(\"h2\", null, \"Tested on 11 and \\xBD JDKs\"), mdx(\"h3\", null, \"from version 5 up to 16 EA\"), mdx(\"hr\", null), mdx(\"img\", {\n    style: {\n      width: '60%'\n    },\n    src: jacoco_bug_image\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    style: {\n      width: '80%'\n    },\n    src: bugs_image\n  }), mdx(\"hr\", null), mdx(\"h2\", null, \"Real Disclaimer\"), mdx(\"img\", {\n    src: esrb_image\n  }), mdx(\"br\", null), mdx(\"ul\", null, mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"li\", null, mdx(Red, {\n    mdxType: \"Red\"\n  }, \"Blood\"), \" of JVM\"), mdx(\"li\", null, mdx(Red, {\n    mdxType: \"Red\"\n  }, \"Naked\"), \" javac\"), mdx(\"li\", null, mdx(Red, {\n    mdxType: \"Red\"\n  }, \"Strong language\"), \" - bytecode\"), mdx(\"li\", null, mdx(Red, {\n    mdxType: \"Red\"\n  }, \"Intence violence\"), \" of your brain\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"Ready ?\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"invokedynamic aka INDY\\\"\",\n    \"title\": \"\\\"invokedynamic\",\n    \"aka\": true,\n    \"INDY\\\"\": true\n  }), \"class LambdaExample {\\n  void run(Runnable runnable) { }\\n\\n  void fun() {\\n    run(() -> {\\n      System.out.println(\\\"Hello, JPoint 2020!\\\");\\n    });\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"5[9:15],6,7[5] title=\\\"invokedynamic aka INDY\\\" subtitle=\\\"lambda\\\"\",\n    \"5[9:15],6,7[5]\": true,\n    \"title\": \"\\\"invokedynamic\",\n    \"aka\": true,\n    \"INDY\\\"\": true,\n    \"subtitle\": \"\\\"lambda\\\"\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"title=\\\"invokedynamic aka INDY\\\" subtitle=\\\"javac LambdaExample.java\\\"\",\n    \"title\": \"\\\"invokedynamic\",\n    \"aka\": true,\n    \"INDY\\\"\": true,\n    \"subtitle\": \"\\\"javac\",\n    \"LambdaExample.java\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"invokedynamic aka INDY\\\" subtitle=\\\"javap -v -p LambdaExample.class\\\"\",\n    \"title\": \"\\\"invokedynamic\",\n    \"aka\": true,\n    \"INDY\\\"\": true,\n    \"subtitle\": \"\\\"javap\",\n    \"-v\": true,\n    \"-p\": true,\n    \"LambdaExample.class\\\"\": true\n  }), \"  void example();\\n    descriptor: ()V\\n    flags: (0x0000)\\n    Code:\\n      stack=2, locals=1, args_size=1\\n         0: aload_0\\n         1: invokedynamic #7,  0 // InvokeDynamic #0:run:()Ljava/lang/Runnable;\\n         6: invokevirtual #11    // Method run:(Ljava/lang/Runnable;)V\\n         9: return\\n\\n  private static void lambda$example$0();\\n    descriptor: ()V\\n    flags: (0x100a) ACC_PRIVATE, ACC_STATIC, ACC_SYNTHETIC\\n    Code:\\n      stack=2, locals=0, args_size=0\\n         0: getstatic     #16   // Field java/lang/System.out:Ljava/io/PrintStream;\\n         3: ldc           #22   // String Hello, JPoint 2020!\\n         5: invokevirtual #24   // Method java/io/PrintStream.println:(Ljava/lang/String;)V\\n         8: return\\n}\\nBootstrapMethods:\\n  0: #37 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:\\n         (Ljava/lang/invoke/MethodHandles$Lookup;\\n          Ljava/lang/String;Ljava/lang/invoke/MethodType;\\n          Ljava/lang/invoke/MethodType;\\n          Ljava/lang/invoke/MethodHandle;\\n          Ljava/lang/invoke/MethodType;\\n         )Ljava/lang/invoke/CallSite;\\n    Method arguments:\\n      #44 ()V\\n      #45 REF_invokeStatic Lambda.lambda$example$0:()V\\n      #44 ()V\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"7\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"7 title=\\\"invokedynamic aka INDY\\\" subtitle=\\\"invokedynamic instruction\\\"\",\n    \"title\": \"\\\"invokedynamic\",\n    \"aka\": true,\n    \"INDY\\\"\": true,\n    \"subtitle\": \"\\\"invokedynamic\",\n    \"instruction\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"21:32 title=\\\"invokedynamic aka INDY\\\" subtitle=\\\"bootstrap method\\\"\",\n    \"21:32\": true,\n    \"title\": \"\\\"invokedynamic\",\n    \"aka\": true,\n    \"INDY\\\"\": true,\n    \"subtitle\": \"\\\"bootstrap\",\n    \"method\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"22[10:72] title=\\\"invokedynamic aka INDY\\\" subtitle=\\\"java.lang.invoke.LambdaMetafactory\\\"\",\n    \"22[10:72]\": true,\n    \"title\": \"\\\"invokedynamic\",\n    \"aka\": true,\n    \"INDY\\\"\": true,\n    \"subtitle\": \"\\\"java.lang.invoke.LambdaMetafactory\\\"\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"28\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"28 title=\\\"invokedynamic aka INDY\\\" subtitle=\\\"returns CallSite that holds MethodHandle\\\"\",\n    \"title\": \"\\\"invokedynamic\",\n    \"aka\": true,\n    \"INDY\\\"\": true,\n    \"subtitle\": \"\\\"returns\",\n    \"CallSite\": true,\n    \"that\": true,\n    \"holds\": true,\n    \"MethodHandle\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"11:19,31 title=\\\"inokedynamic aka INDY\\\" subtitle=\\\"\\\"\",\n    \"11:19,31\": true,\n    \"title\": \"\\\"inokedynamic\",\n    \"aka\": true,\n    \"INDY\\\"\": true,\n    \"subtitle\": \"\\\"\\\"\"\n  }), \"\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"INDY for constants?\\\"\",\n    \"title\": \"\\\"INDY\",\n    \"for\": true,\n    \"constants?\\\"\": true\n  }), \"void someMethod() {\\n  invokedynamic constantBootstrap\\n}\\n\\nstatic CallSite constantBootstrap(\\u2026) {\\n  MethodHandle target = \\u2026;\\n  return new ConstantCallSite(target);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"7:8 title=\\\"INDY for constants?\\\"\",\n    \"7:8\": true,\n    \"title\": \"\\\"INDY\",\n    \"for\": true,\n    \"constants?\\\"\": true\n  }), \"void someMethod() {\\n  invokedynamic constantBootstrap\\n}\\n\\nstatic CallSite constantBootstrap(\\u2026) {\\n  MethodHandle target = \\u2026;\\n  // ConstantCallSite allocation overhead:\\n  return new ConstantCallSite(target);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"2:3 title=\\\"INDY for constants?\\\"\",\n    \"2:3\": true,\n    \"title\": \"\\\"INDY\",\n    \"for\": true,\n    \"constants?\\\"\": true\n  }), \"void someMethod() {\\n  // MethodHandle invocation overhead:\\n  invokedynamic constantBootstrap\\n}\\n\\nstatic CallSite constantBootstrap(\\u2026) {\\n  MethodHandle target = \\u2026;\\n  // ConstantCallSite allocation overhead:\\n  return new ConstantCallSite(target);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"1:10 title=\\\"INDY for constants?\\\"\",\n    \"1:10\": true,\n    \"title\": \"\\\"INDY\",\n    \"for\": true,\n    \"constants?\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"11\": true,\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Java 11 (JEP 309): Dynamic Class-File Constants\\\"\",\n    \"title\": \"\\\"Java\",\n    \"(JEP\": true,\n    \"309):\": true,\n    \"Dynamic\": true,\n    \"Class-File\": true,\n    \"Constants\\\"\": true\n  }), \"// aka CONDY\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"11\": true,\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Java 11 (JEP 309): Dynamic Class-File Constants\\\"\",\n    \"title\": \"\\\"Java\",\n    \"(JEP\": true,\n    \"309):\": true,\n    \"Dynamic\": true,\n    \"Class-File\": true,\n    \"Constants\\\"\": true\n  }), \"/* CONDY resolves to the constant - less overhead */\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"11\": true,\n    \"className\": \"language-js\",\n    \"metastring\": \"1:5 title=\\\"Java 11 (JEP 309): Dynamic Class-File Constants\\\"\",\n    \"1:5\": true,\n    \"title\": \"\\\"Java\",\n    \"(JEP\": true,\n    \"309):\": true,\n    \"Dynamic\": true,\n    \"Class-File\": true,\n    \"Constants\\\"\": true\n  }), \"/* CONDY resolves to the constant - less overhead */\\n\\n/* JIT doesn't trust final fields,\\n   but trusts constant pool entries */\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"11\": true,\n    \"className\": \"language-js\",\n    \"metastring\": \"1:7 title=\\\"Java 11 (JEP 309): Dynamic Class-File Constants\\\"\",\n    \"1:7\": true,\n    \"title\": \"\\\"Java\",\n    \"(JEP\": true,\n    \"309):\": true,\n    \"Dynamic\": true,\n    \"Class-File\": true,\n    \"Constants\\\"\": true\n  }), \"/* CONDY resolves to the constant - less overhead */\\n\\n/* JIT doesn't trust final fields,\\n   but trusts constant pool entries */\\n\\n/* two INDY instructions have different linkage state,\\n   but two CONDY share linkage state */\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Original class\\\"\",\n    \"title\": \"\\\"Original\",\n    \"class\\\"\": true\n  }), \"class Example {\\n  void example() {\\n    \\u2026  // original code\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Original class\\\"\",\n    \"title\": \"\\\"Original\",\n    \"class\\\"\": true\n  }), \"class Example {\\n  void example() {\\n    if (\\u2026) {             // part of original code\\n      \\u2026                  //\\n    } else {\\n      \\u2026                  // another part of original code\\n    }\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Instrumented class\\\"\",\n    \"title\": \"\\\"Instrumented\",\n    \"class\\\"\": true\n  }), \"class Example {\\n  void example() {\\n    \\u2026                    // probe 0 = method is executed\\n\\n    if (\\u2026) {             // part of original code\\n      \\u2026                  //\\n\\n      \\u2026                  // probe 1 = true-branch is executed\\n    } else {\\n      \\u2026                  // another part of original code\\n\\n      \\u2026                  // probe 2 = false-branch is executed\\n    }\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"title=\\\"Instrumented class\\\" subtitle=\\\"probe ?\\\"\",\n    \"title\": \"\\\"Instrumented\",\n    \"class\\\"\": true,\n    \"subtitle\": \"\\\"probe\",\n    \"?\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"3,8,12 title=\\\"Instrumented class\\\" subtitle=\\\"minimal runtime overhead, no side effects on application, thread safe, record execution, identifiable\\\"\",\n    \"3,8,12\": true,\n    \"title\": \"\\\"Instrumented\",\n    \"class\\\"\": true,\n    \"subtitle\": \"\\\"minimal\",\n    \"runtime\": true,\n    \"overhead,\": true,\n    \"no\": true,\n    \"side\": true,\n    \"effects\": true,\n    \"on\": true,\n    \"application,\": true,\n    \"thread\": true,\n    \"safe,\": true,\n    \"record\": true,\n    \"execution,\": true,\n    \"identifiable\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Instrumented class\\\"\",\n    \"title\": \"\\\"Instrumented\",\n    \"class\\\"\": true\n  }), \"class Example {\\n  void example() {\\n    boolean[] probes;\\n    probes[0] = true;    // method is executed\\n\\n    if (\\u2026) {             // part of original code\\n      \\u2026                  //\\n\\n      probes[1] = true;  // true-branch is executed\\n    } else {\\n      \\u2026                  // another part of original code\\n\\n      probes[2] = true;  // false-branch is executed\\n    }\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"3\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"3 title=\\\"Instrumented class\\\" subtitle=\\\"probes ?\\\"\",\n    \"title\": \"\\\"Instrumented\",\n    \"class\\\"\": true,\n    \"subtitle\": \"\\\"probes\",\n    \"?\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Instrumented class\\\"\",\n    \"title\": \"\\\"Instrumented\",\n    \"class\\\"\": true\n  }), \"class org.jacoco.Agent {\\n  synchronized boolean[] getProbes(\\u2026);\\n}\\n\\nclass Example {\\n  synthetic static final boolean[] $jacocoData;\\n\\n  static {\\n    $jacocoData = org.jacoco.Agent.getProbes(\\n      \\\"org/example/Instrumented\\\",  // className\\n      0xCAFEBABE,                  // classId\\n      3                            // probesCount\\n    );\\n  }\\n\\n  void example() {\\n    boolean[] probes = $jacocoData;\\n    probes[0] = true;    // method is executed\\n\\n    if (\\u2026) {             // part of original code\\n      \\u2026                  //\\n\\n      probes[1] = true;  // true-branch is executed\\n    } else {\\n      \\u2026                  // another part of original code\\n\\n      probes[2] = true;  // false-branch is executed\\n    }\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"title=\\\"Instrumented class\\\" subtitle=\\\"problems ?\\\"\",\n    \"title\": \"\\\"Instrumented\",\n    \"class\\\"\": true,\n    \"subtitle\": \"\\\"problems\",\n    \"?\\\"\": true\n  }), \"\"))), mdx(\"hr\", null), mdx(Image, {\n    src: enjoy_hardcore_image,\n    mdxType: \"Image\"\n  }), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"class Child {\\n  void someMethod() {\\n    assert 1 == 2;  // AssertionError ?\\n  }\\n}\\n\\npublic static void main(String[] args) {\\n  new Child().someMethod();\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"class Base {\\n  static {\\n    new Child().someMethod();\\n  }\\n}\\n\\nclass Child extends Base {\\n  void someMethod() {\\n    assert 1 == 2;  // AssertionError ?\\n  }\\n}\\n\\npublic static void main(String[] args) {\\n  new Child();\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"1:15 subtitle=\\\"?\\\"\",\n    \"1:15\": true,\n    \"subtitle\": \"\\\"?\\\"\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"class Base {\\n  static {\\n    new Child().someMethod();\\n  }\\n}\\n\\nclass Child extends Base {\\n  void someMethod() {\\n    /* Java Language Specification 8, \\xA714.10:\\n       An assert statement that is executed\\n       before its class or interface\\n       has completed initialization is enabled */\\n    assert 1 == 2;  // AssertionError !\\n  }\\n}\\n\\npublic static void main(String[] args) {\\n  new Child();\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"class Base {\\n  static {\\n    new Child().someMethod();\\n  }\\n}\\n\\nclass Child extends Base {\\n  synthetic static final boolean $assertionsDisabled;\\n\\n  static {\\n    $assertionsDisabled = Child.class.desiredAssertionStatus();\\n  }\\n\\n  void someMethod() {\\n    /* Java Language Specification 8, \\xA714.10:\\n       An assert statement that is executed\\n       before its class or interface\\n       has completed initialization is enabled */\\n    if (!$assertionsDisabled)        //\\n      if (1 != 2)                    // assert 1 == 2;\\n        throw new AssertionError();  //\\n  }\\n}\\n\\npublic static void main(String[] args) {\\n  new Child();\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"1:26\",\n    \"1:26\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1:16\",\n    \"1:16\": true\n  }), \"class Base {\\n  static {\\n    new Child().someMethod();\\n  }\\n}\\n\\nclass Child extends Base {\\n  synthetic static final boolean[] $jacocoData;\\n\\n  static {\\n    $jacocoData = org.jacoco.Agent.getProbes(\\u2026);\\n  }\\n\\n  void someMethod() {\\n    var probes = $jacocoData;\\n    probes[0] = true;\\n    \\u2026\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"16\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"16 subtitle=\\\"will throw NullPointerException :(\\\"\",\n    \"subtitle\": \"\\\"will\",\n    \"throw\": true,\n    \"NullPointerException\": true,\n    \":(\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"2:9,12 subtitle=\\\"lazy initialization instead of static\\\"\",\n    \"2:9,12\": true,\n    \"subtitle\": \"\\\"lazy\",\n    \"initialization\": true,\n    \"instead\": true,\n    \"of\": true,\n    \"static\\\"\": true\n  }), \"class Child extends Base {\\n  synthetic static final boolean[] $jacocoData;\\n\\n  synthetic static boolean[] $jacocoInit() {\\n    if ($jacocoData == null) {\\n      $jacocoData = org.jacoco.Agent.getProbes(\\u2026);\\n    }\\n    return $jacocoData;\\n  }\\n\\n  void somemethod() {\\n    var probes = $jacocoInit();\\n    probes[0] = true;\\n    \\u2026\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1:13 subtitle=\\\"problems ?\\\"\",\n    \"1:13\": true,\n    \"subtitle\": \"\\\"problems\",\n    \"?\\\"\": true\n  }), \"class org.jacoco.Agent {\\n  synchronized boolean[] getProbes(\\u2026);\\n}\\n\\nclass Child extends Base {\\n  synthetic static final boolean[] $jacocoData;\\n\\n  synthetic static boolean[] $jacocoInit() {\\n    if ($jacocoData == null) {\\n      $jacocoData = org.jacoco.Agent.getProbes(\\u2026);\\n    }\\n    return $jacocoData;\\n  }\\n\\n  void somemethod() {\\n    var probes = $jacocoInit();\\n    probes[0] = true;\\n    \\u2026\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"9\": true,\n    \"10\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"10 subtitle=\\\"throws IllegalAccessError since OpenJDK 9 EA b127\\\"\",\n    \"subtitle\": \"\\\"throws\",\n    \"IllegalAccessError\": true,\n    \"since\": true,\n    \"OpenJDK\": true,\n    \"EA\": true,\n    \"b127\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"9\": true,\n    \"className\": \"language-js\",\n    \"metastring\": \"2[12:24],4[30:42],6:12 subtitle=\\\"checked since OpenJDK 9 EA b127\\\"\",\n    \"2[12:24],4[30:42],6:12\": true,\n    \"subtitle\": \"\\\"checked\",\n    \"since\": true,\n    \"OpenJDK\": true,\n    \"EA\": true,\n    \"b127\\\"\": true\n  }), \"class Child extends Base {\\n  synthetic static final boolean[] $jacocoData;\\n\\n  synthetic static boolean[] $jacocoInit() {\\n    if ($jacocoData == null) {\\n      /* Java Virtual Machine Specification, \\xA76.5 putstatic:\\n         if the field is final,\\n         it must be declared in the current class,\\n         and the instruction must occur\\n         in the <clinit> method of the current class.\\n         Otherwise, an IllegalAccessError is thrown */\\n      $jacocoData = \\u2026\\n    }\\n    return $jacocoData;\\n  }\\n\\n  void someMethod() {\\n    var probes = $jacocoInit();\\n    probes[0] = true;\\n    \\u2026\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"\\\" subtitle=\\\"let's remove final ?\\\"\",\n    \"title\": \"\\\"\\\"\",\n    \"subtitle\": \"\\\"let's\",\n    \"remove\": true,\n    \"final\": true,\n    \"?\\\"\": true\n  }), \"class Child extends Base {\\n  synthetic static boolean[] $jacocoData;\\n\\n  synthetic static boolean[] $jacocoInit() {\\n    if ($jacocoData == null) {\\n      $jacocoData = \\u2026\\n    }\\n    return $jacocoData;\\n  }\\n\\n  void someMethod() {\\n    var probes = $jacocoInit();\\n    probes[0] = true;\\n    \\u2026\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"\\\" subtitle=\\\"what about interfaces with default methods ?\\\"\",\n    \"title\": \"\\\"\\\"\",\n    \"subtitle\": \"\\\"what\",\n    \"about\": true,\n    \"interfaces\": true,\n    \"with\": true,\n    \"default\": true,\n    \"methods\": true,\n    \"?\\\"\": true\n  }), \"interface Base {\\n}\\n\\ninterface Child extends Base {\\n  /* implicitly static final */ boolean[] $jacocoData\\n  /* so require static initializer: */\\n  static {\\n    $jacocoData = \\u2026;\\n  }\\n\\n  default void someMethod() {\\n    var probes = $jacocoData;\\n    probes[0] = true;  // NPE ?\\n    \\u2026\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"\\\"\",\n    \"title\": \"\\\"\\\"\"\n  }), \"interface Base {\\n}\\n\\ninterface Child extends Base {\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"\\\"\",\n    \"title\": \"\\\"\\\"\"\n  }), \"interface Base {\\n  /* Java Language Specification, \\xA712.4.1:\\n     When a class is initialized, its superclasses are initialized,\\n     as well as any superinterfaces that declare any default methods. */\\n  default void base() {}\\n}\\n\\ninterface Child extends Base {\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"\\\"\",\n    \"title\": \"\\\"\\\"\"\n  }), \"interface Base {\\n  /* Java Language Specification, \\xA712.4.1:\\n     When a class is initialized, its superclasses are initialized,\\n     as well as any superinterfaces that declare any default methods. */\\n  default void base() {}\\n\\n  Object o = new Child(){}.someMethod();\\n}\\n\\ninterface Child extends Base {\\n  default Object someMethod() {\\n    throw new AssertionError(\\\"base\\\");\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"\\\"\",\n    \"title\": \"\\\"\\\"\"\n  }), \"interface Base {\\n  /* Java Language Specification, \\xA712.4.1:\\n     When a class is initialized, its superclasses are initialized,\\n     as well as any superinterfaces that declare any default methods. */\\n  default void base() {}\\n\\n  Object o = new Child(){}.someMethod();\\n}\\n\\ninterface Child extends Base {\\n  default Object someMethod() {\\n    throw new AssertionError(\\\"base\\\");\\n  }\\n\\n  Object o = new Object() { { System.out.println(\\\"child\\\"); } };\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"\\\"\",\n    \"title\": \"\\\"\\\"\"\n  }), \"interface Base {\\n  /* Java Language Specification, \\xA712.4.1:\\n     When a class is initialized, its superclasses are initialized,\\n     as well as any superinterfaces that declare any default methods. */\\n  default void base() {}\\n\\n  Object o = new Child(){}.someMethod();\\n}\\n\\ninterface Child extends Base {\\n  default Object someMethod() {\\n    throw new AssertionError(\\\"base\\\");\\n  }\\n\\n  Object o = new Object() { { System.out.println(\\\"child\\\"); } };\\n}\\n\\npublic static void main(String[] args) {\\n  /* Java Language Specification, \\xA712.4.1:\\n     A class or interface type T will be initialized immediately before\\n     the first occurrence of any one of the following:\\n     \\u2026an instance of T is created\\u2026\\n     \\u2026static method declared by T is invoked\\u2026 */\\n  new Child() { };  // or Child.someStatic();\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"subtitle=\\\"base ?     child→base ?\\\"\",\n    \"subtitle\": \"\\\"base\",\n    \"?\": true,\n    \" \": true,\n    \"child→base\": true,\n    \"?\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"subtitle=\\\"base < JDK 8u40\\\"\",\n    \"subtitle\": \"\\\"base\",\n    \"<\": true,\n    \"JDK\": true,\n    \"8u40\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"subtitle=\\\"JDK 8u40 ≤ child→base→crash < JDK8u152 EA\\\"\",\n    \"subtitle\": \"\\\"JDK\",\n    \"8u40\": true,\n    \"≤\": true,\n    \"child→base→crash\": true,\n    \"<\": true,\n    \"JDK8u152\": true,\n    \"EA\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"subtitle=\\\"JDK 8u40 ≤ base < JDK8u152 EA\\\"\",\n    \"subtitle\": \"\\\"JDK\",\n    \"8u40\": true,\n    \"≤\": true,\n    \"base\": true,\n    \"<\": true,\n    \"JDK8u152\": true,\n    \"EA\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"subtitle=\\\"JDK 8u152 EA ≤ child→base\\\"\",\n    \"subtitle\": \"\\\"JDK\",\n    \"8u152\": true,\n    \"EA\": true,\n    \"≤\": true,\n    \"child→base\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"\\\"\",\n    \"title\": \"\\\"\\\"\"\n  }), \"interface Child extends Base {\\n  /* implicitly static final */ synthetic boolean[] $jacocoData;\\n\\n  static {\\n    $jacocoData = org.jacoco.Agent.getProbes(\\u2026);\\n  }\\n\\n  synthetic static boolean[] $jacocoInit() {\\n    return $jacocoData == null\\n      ? org.jacoco.agent.getProbes(\\u2026)  // slow path for JDK < 8u152\\n      : $jacocoData;\\n  }\\n\\n  default void someMethod() {\\n    var probes = $jacocoInit();\\n    probes[0] = true;\\n    \\u2026\\n  }\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"\\\" subtitle=\\\"condy !\\\"\",\n    \"title\": \"\\\"\\\"\",\n    \"subtitle\": \"\\\"condy\",\n    \"!\\\"\": true\n  }), \"interface Child extends Base {\\n  synthetic static boolean[] $jacocoInit(\\n    java.lang.invoke.MethodHandles.Lookup caller,\\n    java.lang.String name,\\n    java.lang.Class type\\n  ) {\\n    return org.jacoco.Agent.getProbes(\\u2026);\\n  }\\n\\n  default void someMethod() {\\n    boolean[] probes = /* LDC $jacocoInit */;\\n    probes[0] = true;\\n    \\u2026\\n  }\\n\\n  default void someOtherMethod() {\\n    boolean[] probes = /* LDC $jacocoInit */;\\n    probes[\\u2026] = true;\\n    \\u2026\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"\\\" subtitle=\\\"condy !\\\"\",\n    \"title\": \"\\\"\\\"\",\n    \"subtitle\": \"\\\"condy\",\n    \"!\\\"\": true\n  }), \"class Child extends Base {\\n  synthetic static boolean[] $jacocoInit(\\n    java.lang.invoke.MethodHandles.Lookup caller,\\n    java.lang.String name,\\n    java.lang.Class type\\n  ) {\\n    return org.jacoco.Agent.getProbes(\\u2026);\\n  }\\n\\n  void someMethod() {\\n    boolean[] probes = /* LDC $jacocoInit */;\\n    probes[0] = true;\\n    \\u2026\\n  }\\n\\n  void someOtherMethod() {\\n    boolean[] probes = /* LDC $jacocoInit */;\\n    probes[\\u2026] = true;\\n    \\u2026\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"title=\\\"\\\" subtitle=\\\"no more synthetic field !\\\"\",\n    \"title\": \"\\\"\\\"\",\n    \"subtitle\": \"\\\"no\",\n    \"more\": true,\n    \"synthetic\": true,\n    \"field\": true,\n    \"!\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"title=\\\"\\\" subtitle=\\\"less overhead !\\\"\",\n    \"title\": \"\\\"\\\"\",\n    \"subtitle\": \"\\\"less\",\n    \"overhead\": true,\n    \"!\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"11,17 title=\\\"\\\" subtitle=\\\"JDK-8228485: JVM crash due to CONDY of array type\\\"\",\n    \"11,17\": true,\n    \"title\": \"\\\"\\\"\",\n    \"subtitle\": \"\\\"JDK-8228485:\",\n    \"JVM\": true,\n    \"crash\": true,\n    \"due\": true,\n    \"to\": true,\n    \"CONDY\": true,\n    \"of\": true,\n    \"array\": true,\n    \"type\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"11,17 title=\\\"\\\" subtitle=\\\"JDK-8228485: found and fixed in OpenJDK 13\\\"\",\n    \"11,17\": true,\n    \"title\": \"\\\"\\\"\",\n    \"subtitle\": \"\\\"JDK-8228485:\",\n    \"found\": true,\n    \"and\": true,\n    \"fixed\": true,\n    \"in\": true,\n    \"OpenJDK\": true,\n    \"13\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"11,17 title=\\\"\\\" subtitle=\\\"JDK-8228485: backported to 11.0.4, 12.0.2\\\"\",\n    \"11,17\": true,\n    \"title\": \"\\\"\\\"\",\n    \"subtitle\": \"\\\"JDK-8228485:\",\n    \"backported\": true,\n    \"to\": true,\n    \"11.0.4,\": true,\n    \"12.0.2\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"2,11,17 title=\\\"\\\" subtitle=\\\"JDK-8228485: workaround - use Object for CONDY, followed by CHECKCAST\\\"\",\n    \"2,11,17\": true,\n    \"title\": \"\\\"\\\"\",\n    \"subtitle\": \"\\\"JDK-8228485:\",\n    \"workaround\": true,\n    \"-\": true,\n    \"use\": true,\n    \"Object\": true,\n    \"for\": true,\n    \"CONDY,\": true,\n    \"followed\": true,\n    \"by\": true,\n    \"CHECKCAST\\\"\": true\n  }), \"class Child extends Base {\\n  synthetic static Object $jacocoInit(\\n    java.lang.invoke.MethodHandles.Lookup caller,\\n    java.lang.String name,\\n    java.lang.Class type\\n  ) {\\n    return org.jacoco.Agent.getProbes(\\u2026);\\n  }\\n\\n  void someMethod() {\\n    boolean[] probes = (boolean[]) /* LDC $jacocoInit */;\\n    probes[0] = true;\\n    \\u2026\\n  }\\n\\n  void someOtherMethod() {\\n    var probes = (boolean[]) /* LDC $jacocoInit */;\\n    probes[\\u2026] = true;\\n    \\u2026\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"7\": true,\n    \"className\": \"language-diff true\",\n    \"metastring\": \"7 title=\\\"\\\" subtitle=\\\"JDK-8228485: JVM crashes when bootstrap method for CONDY triggers loading of class whose static initializer throws exception\\\"\",\n    \"title\": \"\\\"\\\"\",\n    \"subtitle\": \"\\\"JDK-8228485:\",\n    \"JVM\": true,\n    \"crashes\": true,\n    \"when\": true,\n    \"bootstrap\": true,\n    \"method\": true,\n    \"for\": true,\n    \"CONDY\": true,\n    \"triggers\": true,\n    \"loading\": true,\n    \"of\": true,\n    \"whose\": true,\n    \"static\": true,\n    \"initializer\": true,\n    \"throws\": true,\n    \"exception\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"7\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"7 title=\\\"\\\" subtitle=\\\"JDK-8228485: found and fixed in OpenJDK 14\\\"\",\n    \"title\": \"\\\"\\\"\",\n    \"subtitle\": \"\\\"JDK-8228485:\",\n    \"found\": true,\n    \"and\": true,\n    \"fixed\": true,\n    \"in\": true,\n    \"OpenJDK\": true,\n    \"14\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"7\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"7 title=\\\"\\\" subtitle=\\\"JDK-8228485: backported to 11.0.5, 13.0.1\\\"\",\n    \"title\": \"\\\"\\\"\",\n    \"subtitle\": \"\\\"JDK-8228485:\",\n    \"backported\": true,\n    \"to\": true,\n    \"11.0.5,\": true,\n    \"13.0.1\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"7\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"7 title=\\\"\\\" subtitle=\\\"JDK-8228485: workaround - do not throw exceptions ;)\\\"\",\n    \"title\": \"\\\"\\\"\",\n    \"subtitle\": \"\\\"JDK-8228485:\",\n    \"workaround\": true,\n    \"-\": true,\n    \"do\": true,\n    \"not\": true,\n    \"throw\": true,\n    \"exceptions\": true,\n    \";)\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"7\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"7 title=\\\"\\\" subtitle=\\\"JDK-8228485: workaround - do not throw exceptions ;) actually we got rid of static initializer\\\"\",\n    \"title\": \"\\\"\\\"\",\n    \"subtitle\": \"\\\"JDK-8228485:\",\n    \"workaround\": true,\n    \"-\": true,\n    \"do\": true,\n    \"not\": true,\n    \"throw\": true,\n    \"exceptions\": true,\n    \";)\": true,\n    \"actually\": true,\n    \"we\": true,\n    \"got\": true,\n    \"rid\": true,\n    \"of\": true,\n    \"static\": true,\n    \"initializer\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"title=\\\"\\\" subtitle=\\\"https://github.com/eclipse/openj9/issues/5895 OpenJ9 JVM crashes due to missing GC barrier\\\"\",\n    \"title\": \"\\\"\\\"\",\n    \"subtitle\": \"\\\"https://github.com/eclipse/openj9/issues/5895\",\n    \"OpenJ9\": true,\n    \"JVM\": true,\n    \"crashes\": true,\n    \"due\": true,\n    \"to\": true,\n    \"missing\": true,\n    \"GC\": true,\n    \"barrier\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"class Base {\\n  static {\\n    new Child().someMethod();\\n  }\\n}\\n\\nclass Child extends Base {\\n  synthetic static final boolean $assertionsDisabled;\\n\\n  static {\\n    $assertionsDisabled = Child.class.desiredAssertionStatus();\\n  }\\n\\n  void someMethod() {\\n    /* Java Language Specification 8, \\xA714.10:\\n       An assert statement that is executed\\n       before its class or interface\\n       has completed initialization is enabled */\\n    if (!$assertionsDisabled)        //\\n      if (1 != 2)                    // assert 1 == 2;\\n        throw new AssertionError();  //\\n  }\\n}\\n\\npublic static void main(String[] args) {\\n  new Child();\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"19[10:28] subtitle=\\\"condy ! using java.lang.invoke.ConstantBootstraps\\\"\",\n    \"19[10:28]\": true,\n    \"subtitle\": \"\\\"condy\",\n    \"!\": true,\n    \"using\": true,\n    \"java.lang.invoke.ConstantBootstraps\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import org.objectweb.asm.*;\\nimport java.lang.invoke.MethodType;\\n\\nclass CondyForAssert {\\n  void gen(MethodVisitor mv) {\\n\\n    Handle ConstantBootstraps_invoke = new Handle(\\n      Opcodes.H_INVOKESTATIC,\\n      \\\"java/lang/invoke/ConstantBootstraps\\\",\\n      \\\"invoke\\\",\\n      MethodType.methodType(\\n        \\u2026\\n      ).toMethodDescriptorString(),\\n      false\\n    );\\n\\n    Handle Class_desiredAssertionStatus = new Handle(\\n      Opcodes.H_INVOKEVIRTUAL,\\n      \\\"java/lang/Class\\\",\\n      \\\"desiredAssertionStatus\\\",\\n      MethodType.methodType(\\n        boolean.class\\n      ).toMethodDescriptorString(),\\n      false\\n    );\\n\\n    mv.visitLdcInsn(new ConstantDynamic(\\n      \\\"$assertionsDisabled\\\",\\n      \\\"Z\\\",\\n      ConstantBootstraps_invoke,\\n      Class_desiredAssertionStatus,\\n      Type.getType(\\\"LChild;\\\")\\n    ));\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Non-capturing lambdas\\\"\",\n    \"title\": \"\\\"Non-capturing\",\n    \"lambdas\\\"\": true\n  }), \"void m1() {\\n  \\u2026\\n  Predicate<String> p1 = String::isEmpty();\\n  \\u2026\\n}\\n\\nvoid m2() {\\n  \\u2026\\n  Predicate<String> p2 = String::isEmpty();\\n  \\u2026\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"3,9 title=\\\"Non-capturing lambdas\\\" subtitle=\\\"same bootstrap method, but two indy instructions, replaceable by shared condy\\\"\",\n    \"3,9\": true,\n    \"title\": \"\\\"Non-capturing\",\n    \"lambdas\\\"\": true,\n    \"subtitle\": \"\\\"same\",\n    \"bootstrap\": true,\n    \"method,\": true,\n    \"but\": true,\n    \"two\": true,\n    \"indy\": true,\n    \"instructions,\": true,\n    \"replaceable\": true,\n    \"by\": true,\n    \"shared\": true,\n    \"condy\\\"\": true\n  }), \"\"))), mdx(\"hr\", null), mdx(\"div\", {\n    style: {\n      height: '90%'\n    }\n  }, mdx(\"center\", null, mdx(\"img\", {\n    style: {\n      width: '10%'\n    },\n    src: twitter_image\n  })), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"enum E {\\n  C1,\\n  C2,\\n  // how much more is possible?\\n}\\n\")))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Enum constants\\\"\",\n    \"title\": \"\\\"Enum\",\n    \"constants\\\"\": true\n  }), \"enum E {\\n  C1,\\n  C2,\\n  // how much more is possible?\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"title=\\\"Enum constants\\\" subtitle=\\\"javac E.java\\\"\",\n    \"title\": \"\\\"Enum\",\n    \"constants\\\"\": true,\n    \"subtitle\": \"\\\"javac\",\n    \"E.java\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Enum constants\\\" subtitle=\\\"javap -v -p E.class\\\"\",\n    \"title\": \"\\\"Enum\",\n    \"constants\\\"\": true,\n    \"subtitle\": \"\\\"javap\",\n    \"-v\": true,\n    \"-p\": true,\n    \"E.class\\\"\": true\n  }), \"final class E extends java.lang.Enum<E>\\n  minor version: 0\\n  major version: 58\\n{\\n  public static final E C1;\\n    descriptor: LE;\\n    flags: (0x4019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_ENUM\\n\\n  public static final E C2;\\n    descriptor: LE;\\n    flags: (0x4019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_ENUM\\n\\n  private static final E[] $VALUES;\\n    descriptor: [LE;\\n    flags: (0x101a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL, ACC_SYNTHETIC\\n\\n  public static E[] values();\\n    descriptor: ()[LE;\\n    flags: (0x0009) ACC_PUBLIC, ACC_STATIC\\n    Code:\\n      stack=1, locals=0, args_size=0\\n         0: getstatic     #1  // Field $VALUES:[LE;\\n         3: invokevirtual #7  // Method \\\"[LE;\\\".clone:()Ljava/lang/Object;\\n         6: checkcast     #8  // class \\\"[LE;\\\"\\n         9: areturn\\n\\n  public static E valueOf(java.lang.String);\\n    descriptor: (Ljava/lang/String;)LE;\\n    flags: (0x0009) ACC_PUBLIC, ACC_STATIC\\n    Code:\\n      stack=2, locals=1, args_size=1\\n         0: ldc           #2  // class E\\n         2: aload_0\\n         3: invokestatic  #12\\n            // Method java/lang/Enum.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;\\n         6: checkcast     #2  // class E\\n         9: areturn\\n\\n  private E();\\n    descriptor: (Ljava/lang/String;I)V\\n    flags: (0x0002) ACC_PRIVATE\\n    Code:\\n      stack=3, locals=3, args_size=3\\n         0: aload_0\\n         1: aload_1\\n         2: iload_2\\n         3: invokespecial #18  // Method java/lang/Enum.\\\"<init>\\\":(Ljava/lang/String;I)V\\n         6: return\\n\\n  static {};\\n    descriptor: ()V\\n    flags: (0x0008) ACC_STATIC\\n    Code:\\n      stack=4, locals=0, args_size=0\\n         0: new           #2   // class E\\n         3: dup\\n         4: ldc           #22  // String C1\\n         6: iconst_0\\n         7: invokespecial #24  // Method \\\"<init>\\\":(Ljava/lang/String;I)V\\n        10: putstatic     #25  // Field C1:LE;\\n        13: new           #2   // class E\\n        16: dup\\n        17: ldc           #28  // String C2\\n        19: iconst_1\\n        20: invokespecial #24  // Method \\\"<init>\\\":(Ljava/lang/String;I)V\\n        23: putstatic     #30  // Field C2:LE;\\n        26: iconst_2\\n        27: anewarray     #2   // class E\\n        30: dup\\n        31: iconst_0\\n        32: getstatic     #25 // Field C1:LE;\\n        35: aastore\\n        36: dup\\n        37: iconst_1\\n        38: getstatic     #30 // Field C2:LE;\\n        41: aastore\\n        42: putstatic     #1  // Field $VALUES:[LE;\\n        45: return\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"5:11 title=\\\"Enum constants\\\" subtitle=\\\"\\\"\",\n    \"5:11\": true,\n    \"title\": \"\\\"Enum\",\n    \"constants\\\"\": true,\n    \"subtitle\": \"\\\"\\\"\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"13:15 title=\\\"Enum constants\\\" subtitle=\\\"\\\"\",\n    \"13:15\": true,\n    \"title\": \"\\\"Enum\",\n    \"constants\\\"\": true,\n    \"subtitle\": \"\\\"\\\"\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"17:25 title=\\\"Enum constants\\\" subtitle=\\\"return \\\\$VALUES.clone()\\\"\",\n    \"17:25\": true,\n    \"title\": \"\\\"Enum\",\n    \"constants\\\"\": true,\n    \"subtitle\": \"\\\"return\",\n    \"\\\\$VALUES.clone()\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"50:79 title=\\\"Enum constants\\\" subtitle=\\\"static initializer\\\"\",\n    \"50:79\": true,\n    \"title\": \"\\\"Enum\",\n    \"constants\\\"\": true,\n    \"subtitle\": \"\\\"static\",\n    \"initializer\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1:26 title=\\\"Enum constants\\\"\",\n    \"1:26\": true,\n    \"title\": \"\\\"Enum\",\n    \"constants\\\"\": true\n  }), \"class E extends Enum {\\n  public static final E C1;\\n\\n  public static final E C2;\\n\\n  private static final E[] $VALUES;\\n\\n  static {\\n    C1 = new E(\\\"C1\\\", 1);\\n    C2 = new E(\\\"C2\\\", 2);\\n    VALUES = new E[2];\\n    VALUES[0] = C1;\\n    VALUES[1] = C2;\\n  }\\n\\n  private E(String name, int ordinal) {\\n    super(name, ordinal);\\n  }\\n\\n  public E[] values() {\\n    return VALUES.clone();\\n  }\\n\\n  public E valueOf(String name) {\\n    return Enum.valueOf(E.class, name);\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"9,10 title=\\\"Enum constants\\\" subtitle=\\\"condy ! using java.lang.invoke.ConstantBootstraps\\\"\",\n    \"9,10\": true,\n    \"title\": \"\\\"Enum\",\n    \"constants\\\"\": true,\n    \"subtitle\": \"\\\"condy\",\n    \"!\": true,\n    \"using\": true,\n    \"java.lang.invoke.ConstantBootstraps\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"11:13 title=\\\"Enum constants\\\" subtitle=\\\"also can be condy !\\\"\",\n    \"11:13\": true,\n    \"title\": \"\\\"Enum\",\n    \"constants\\\"\": true,\n    \"subtitle\": \"\\\"also\",\n    \"can\": true,\n    \"be\": true,\n    \"condy\": true,\n    \"!\\\"\": true\n  }), \"\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Enum switch\\\"\",\n    \"title\": \"\\\"Enum\",\n    \"switch\\\"\": true\n  }), \"enum E {\\n  TRUE,\\n  FALSE,\\n}\\n\\nclass Example {\\n  String fun(E e) {\\n    return switch (e) {\\n      case TRUE -> \\\"1\\\";\\n      case FALSE -> \\\"0\\\";\\n    };\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"14\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"title=\\\"Enum switch\\\" subtitle=\\\"javac --release 14 Example.java\\\"\",\n    \"title\": \"\\\"Enum\",\n    \"switch\\\"\": true,\n    \"subtitle\": \"\\\"javac\",\n    \"--release\": true,\n    \"Example.java\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Enum switch\\\" subtitle=\\\"javap -v -p Example.class\\\"\",\n    \"title\": \"\\\"Enum\",\n    \"switch\\\"\": true,\n    \"subtitle\": \"\\\"javap\",\n    \"-v\": true,\n    \"-p\": true,\n    \"Example.class\\\"\": true\n  }), \"class Example\\n  minor version: 0\\n  major version: 58\\n{\\n  java.lang.String fun(E);\\n    descriptor: (LE;)Ljava/lang/String;\\n    flags: (0x0000)\\n    Code:\\n      stack=2, locals=1, args_size=1\\n         0: getstatic     #7  // Field Example$1.$SwitchMap$E:[I\\n         3: aload_0\\n         4: invokevirtual #13 // Method E.ordinal:()I\\n         7: iaload\\n         8: lookupswitch  { // 2\\n                       1: 36\\n                       2: 41\\n                 default: 46\\n            }\\n        36: ldc           #19 // String 1\\n        38: goto          54\\n        41: ldc           #21 // String 0\\n        43: goto          54\\n        46: new           #23 // class java/lang/IncompatibleClassChangeError\\n        49: dup\\n        50: invokespecial #25 // Method java/lang/IncompatibleClassChangeError.\\\"<init>\\\":()V\\n        53: athrow\\n        54: areturn\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"1:3 title=\\\"Enum switch\\\" subtitle=\\\"Java 14\\\"\",\n    \"1:3\": true,\n    \"title\": \"\\\"Enum\",\n    \"switch\\\"\": true,\n    \"subtitle\": \"\\\"Java\",\n    \"14\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"14:17 title=\\\"Enum switch\\\" subtitle=\\\"switch\\\"\",\n    \"14:17\": true,\n    \"title\": \"\\\"Enum\",\n    \"switch\\\"\": true,\n    \"subtitle\": \"\\\"switch\\\"\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"10:13 title=\\\"Enum switch\\\" subtitle=\\\"switch by Example\\\\$1.$SwitchMap\\\\$E[e.ordinal())] !?\\\"\",\n    \"10:13\": true,\n    \"title\": \"\\\"Enum\",\n    \"switch\\\"\": true,\n    \"subtitle\": \"\\\"switch\",\n    \"by\": true,\n    \"Example\\\\$1.$SwitchMap\\\\$E[e.ordinal())]\": true,\n    \"!?\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Enum switch\\\" subtitle=\\\"javap -v -p Example\\\\$1.class\\\"\",\n    \"title\": \"\\\"Enum\",\n    \"switch\\\"\": true,\n    \"subtitle\": \"\\\"javap\",\n    \"-v\": true,\n    \"-p\": true,\n    \"Example\\\\$1.class\\\"\": true\n  }), \"class Example$1\\n  minor version: 0\\n  major version: 58\\n{\\n  static final int[] $SwitchMap$E;\\n    descriptor: [I\\n    flags: (0x1018) ACC_STATIC, ACC_FINAL, ACC_SYNTHETIC\\n\\n  static {};\\n    descriptor: ()V\\n    flags: (0x0008) ACC_STATIC\\n    Code:\\n      stack=3, locals=1, args_size=0\\n         0: invokestatic  #1  // Method E.values:()[LE;\\n         3: arraylength\\n         4: newarray      int\\n         6: putstatic     #7  // Field $SwitchMap$E:[I\\n         9: getstatic     #7  // Field $SwitchMap$E:[I\\n        12: getstatic     #13 // Field E.TRUE:LE;\\n        15: invokevirtual #17 // Method E.ordinal:()I\\n        18: iconst_1\\n        19: iastore\\n        20: goto          24\\n        23: astore_0\\n        24: getstatic     #7  // Field $SwitchMap$E:[I\\n        27: getstatic     #23 // Field E.FALSE:LE;\\n        30: invokevirtual #17 // Method E.ordinal:()I\\n        33: iconst_2\\n        34: iastore\\n        35: goto          39\\n        38: astore_0\\n        39: return\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1:13 title=\\\"Enum switch\\\"\",\n    \"1:13\": true,\n    \"title\": \"\\\"Enum\",\n    \"switch\\\"\": true\n  }), \"class Example$1 {\\n  static final int[] $SwitchMap$E;\\n\\n  static {\\n    $SwitchMap$E = new int[E.values().length];\\n\\n    try {\\n      $SwitchMap$E[E.TRUE.ordinal()] = 1;\\n    } catch (NoSuchFieldError ignore) {}\\n\\n    try {\\n      $SwitchMap$E[E.FALSE.ordinal()] = 2;\\n    } catch (NoSuchFieldError ignore) {}\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Enum switch\\\"\",\n    \"title\": \"\\\"Enum\",\n    \"switch\\\"\": true\n  }), \"class Example {\\n  String fun(E e) {\\n    switch (Example$1.$SwitchMap$E[e.ordinal]) { // switch (e) {\\n      case 1: return \\\"1\\\";                        //   case TRUE -> return \\\"1\\\";\\n      case 2: return \\\"0\\\";                        //   case FALSE -> return \\\"0\\\";\\n      default:\\n        throw new IncompatibleClassChangeError();\\n    }\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"title=\\\"Enum switch\\\" subtitle=\\\"problems ?\\\"\",\n    \"title\": \"\\\"Enum\",\n    \"switch\\\"\": true,\n    \"subtitle\": \"\\\"problems\",\n    \"?\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Enum switch\\\" subtitle=\\\"what will happen ?\\\"\",\n    \"title\": \"\\\"Enum\",\n    \"switch\\\"\": true,\n    \"subtitle\": \"\\\"what\",\n    \"will\": true,\n    \"happen\": true,\n    \"?\\\"\": true\n  }), \"enum X {\\n    A(Y.B);\\n\\n    X(Y y) {\\n        switch (y) {\\n            case B: break;\\n        }\\n    }\\n\\n    public void neverCall(X x) {\\n        switch (x) {\\n            case A: break;\\n        }\\n    }\\n}\\n\\nenum Y {\\n    B;\\n\\n    public static void main(String[] args) {\\n        System.out.println(X.A);\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Enum switch\\\"\",\n    \"title\": \"\\\"Enum\",\n    \"switch\\\"\": true\n  }), \"/*\\n\\nException in thread \\\"main\\\" java.lang.ExceptionInInitializerError\\n        at X.<init>(Example.java:5)\\n        at X.<clinit>(Example.java:2)\\n        at Y.main(Example.java:21)\\nCaused by: java.lang.NullPointerException\\n        at X.values(Example.java:1)\\n        at X$1.<clinit>(Example.java:11)\\n        ... 3 more\\n\\n*/\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Enum switch\\\"\",\n    \"title\": \"\\\"Enum\",\n    \"switch\\\"\": true\n  }), \"enum X { // Caused by NullPointerException at X.values(Example.java:1)\\n    A(Y.B);\\n\\n    X(Y y) {\\n        switch (y) { // ExceptionInInitializerError at X.<init>(Example.java:5)\\n            case B: break;\\n        }\\n    }\\n\\n    public void neverCall(X x) {\\n        switch (x) { // at X$1<clinit>(Example.java:11)\\n            case A: break;\\n        }\\n    }\\n}\\n\\nenum Y {\\n    B;\\n\\n    public static void main(String[] args) {\\n        System.out.println(X.A);\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Enum switch\\\" subtitle=\\\"someone said no NullPointerException in Kotlin ? ;)\\\"\",\n    \"title\": \"\\\"Enum\",\n    \"switch\\\"\": true,\n    \"subtitle\": \"\\\"someone\",\n    \"said\": true,\n    \"no\": true,\n    \"NullPointerException\": true,\n    \"in\": true,\n    \"Kotlin\": true,\n    \"?\": true,\n    \";)\\\"\": true\n  }), \"enum class X(y: Y) {\\n  A(Y.B);\\n\\n  init {\\n    when(y) { Y.B -> {} }\\n  }\\n\\n  fun neverCall(x: X) {\\n    when(x) { X.A -> {} }\\n  }\\n}\\n\\nenum class Y() {\\n  B\\n}\\n\\nfun main(args: Array<String>) {\\n  print(X.A)\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Enum switch\\\"\",\n    \"title\": \"\\\"Enum\",\n    \"switch\\\"\": true\n  }), \"class X {\\n  static final X A;\\n  static final X[] $VALUES;\\n\\n  static { // <clinit>\\n    X.A = new X(0, \\\"A\\\", Y.B); // at Example.java:2\\n    $VALUES = new X[] { X.A };\\n  }\\n\\n  X(Y y) { // <init>\\n    switch (X$1.$SwitchMap$Y[y.ordinal()]) { // at Example.java:5\\n      case B: break;\\n    }\\n  }\\n\\n  X[] values() {\\n    return $VALUES.clone(); // NPE at Example.java:1\\n  }\\n}\\n\\nclass X$1 {\\n  static final int[] $SwitchMap$Y;\\n  static final int[] $SwitchMap$X;\\n\\n  static { // <clinit>\\n    $SwitchMap$X = new int[X.values().length]; // at Example.java:11\\n    try {                                      // due to switch by enum in neverCall\\n      $SwitchMap$X[X.A.ordinal()] = 1;         //\\n    } catch (NoSuchFieldError ignore) {}       //\\n\\n    $SwitchMap$Y = new int[Y.values().length];\\n    try {\\n      $SwitchMap$Y[Y.B.ordinal()] = 1;\\n    } catch (NoSuchFieldError ignore) {}\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"5:6\",\n    \"5:6\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"10:11\",\n    \"10:11\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"25:26\",\n    \"25:26\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"16:17\",\n    \"16:17\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"6:7,17\",\n    \"6:7,17\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Enum switch\\\" subtitle=\\\"new bootstrap method for condy ?\\\"\",\n    \"title\": \"\\\"Enum\",\n    \"switch\\\"\": true,\n    \"subtitle\": \"\\\"new\",\n    \"bootstrap\": true,\n    \"method\": true,\n    \"for\": true,\n    \"condy\": true,\n    \"?\\\"\": true\n  }), \"  static int[] initEnumMappingArray(\\n    MethodHandles.Lookup caller, // lookup context describing the class performing the operation\\n    String name,                 // name of the constant to return\\n    Class<?> type,               // expected type of constant\\n    Class enumClass,             // Class object describing the enum type\\n    String... enumNamesInSwitch  // names of enum constants in switch\\n  ) {\\n    int length = enumClass.getEnumConstants().length;\\n    int[] mapping = new int[length];\\n    for (int i = 0; i < enumNames.length; i++) {\\n      try {\\n        Enum<?> enumValue = Enum.valueOf(enumClass, enumNamesInSwitch[i]);\\n        mapping[enumValue.ordinal()] = i + 1;\\n      } catch (IllegalArgumentException ignore) {\\n      }\\n    }\\n    return mapping;\\n  }\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Good singleton factory\\\" subtitle=\\\"?\\\"\",\n    \"title\": \"\\\"Good\",\n    \"singleton\": true,\n    \"factory\\\"\": true,\n    \"subtitle\": \"\\\"?\\\"\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Good singleton factory\\\" subtitle=\\\"static final\\\"\",\n    \"title\": \"\\\"Good\",\n    \"singleton\": true,\n    \"factory\\\"\": true,\n    \"subtitle\": \"\\\"static\",\n    \"final\\\"\": true\n  }), \"class Singleton {\\n  public static final Singleton INSTANCE = new Singleton();\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Good singleton factory\\\" subtitle=\\\"Synchronized accessor\\\"\",\n    \"title\": \"\\\"Good\",\n    \"singleton\": true,\n    \"factory\\\"\": true,\n    \"subtitle\": \"\\\"Synchronized\",\n    \"accessor\\\"\": true\n  }), \"class Singleton {\\n  private static Singleton instance;\\n\\n  public static Singleton getInstance() {\\n    synchronized (this) {\\n      if (instance == null) {\\n        instance = new Singleton();\\n      }\\n      return instance;\\n    }\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Good singleton factory\\\" subtitle=\\\"Double Checked Locking\\\"\",\n    \"title\": \"\\\"Good\",\n    \"singleton\": true,\n    \"factory\\\"\": true,\n    \"subtitle\": \"\\\"Double\",\n    \"Checked\": true,\n    \"Locking\\\"\": true\n  }), \"class Singleton {\\n  private static volatile Singleton instance;\\n\\n  public static Singleton getInstance() {\\n    Singleton localInstance = instance;\\n    if (localInstance == null) {\\n      synchronized (Singleton.class) {\\n        localInstance = instance;\\n        if (localInstance == null)\\n          instance = localInstance = new Singleton();\\n      }\\n    }\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Good singleton factory\\\" subtitle=\\\"Initialization-on-demand holder\\\"\",\n    \"title\": \"\\\"Good\",\n    \"singleton\": true,\n    \"factory\\\"\": true,\n    \"subtitle\": \"\\\"Initialization-on-demand\",\n    \"holder\\\"\": true\n  }), \"class Singleton {\\n  private Singleton() {}\\n\\n  private static class Holder {\\n    static final Singleton INSTANCE = new Singleton();\\n  }\\n\\n  public static Singleton getInstance() {\\n    return Holder.INSTANCE;\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Good singleton factory\\\" subtitle=\\\"Kotlin\\\"\",\n    \"title\": \"\\\"Good\",\n    \"singleton\": true,\n    \"factory\\\"\": true,\n    \"subtitle\": \"\\\"Kotlin\\\"\"\n  }), \"val singleton: Singleton by lazy(LazyThreadSafetyMode.PUBLICATION) {\\n  Singleton()\\n}\\n\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"Lazy Static Final Fields !\"), mdx(\"h2\", null, \"JEP Draft\"), mdx(\"h3\", null, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"https://openjdk.java.net/jeps/8209964\"\n  }), \"https://openjdk.java.net/jeps/8209964\")), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"JEP draft: Lazy Static Final Fields\\\"\",\n    \"title\": \"\\\"JEP\",\n    \"draft:\": true,\n    \"Lazy\": true,\n    \"Static\": true,\n    \"Final\": true,\n    \"Fields\\\"\": true\n  }), \"class Singleton {\\n  lazy static final Singleton INSTANCE = new Singleton();\\n  // or maybe\\n  const Singleton INSTANCE = new Singleton();\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"There is more\\\"\",\n    \"title\": \"\\\"There\",\n    \"is\": true,\n    \"more\\\"\": true\n  }), \"/* Java 11 (JEP 309): Dynamic Class-File Constants */\\n\\n/* Java 12 (JEP 334): JVM Constants API */\\n\\n/* JEP 303: Intrinsics for the LDC and INVOKEDYNAMIC Instructions */\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Takeaways\\\"\",\n    \"title\": \"\\\"Takeaways\\\"\"\n  }), \"\\n/*\\n\\nNew powerful Java and JVM features,\\nsuch as dynamic constants, now arrive very quickly,\\nopening possibilities for many other features,\\nnot only for the Java and JVM,\\nbut also for other languages.\\n\\nDon't wait and don't be afraid to try them out\\nand provide feedback before next LTS release.\\n\\n*/\\n\"))), mdx(\"hr\", null), mdx(Image, {\n    src: end_image,\n    mdxType: \"Image\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"1d7a5c39-7d15-5310-b44e-97027bbccbca","slug":"","title":"Dynamic Constants"}}}